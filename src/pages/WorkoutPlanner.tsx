import React, { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { Link } from 'react-router-dom';
import { geminiService, WorkoutRequest } from '../services/geminiService';
import WorkoutPlanDisplay from '../components/WorkoutPlanDisplay';
import { 
  Dumbbell, 
  Target, 
  Clock, 
  Zap, 
  Plus,
  Play,
  Calendar,
  TrendingUp,
  User,
  Settings
} from 'lucide-react';

const WorkoutPlanner = () => {
  const { user } = useAuth();
  const [currentGoal, setCurrentGoal] = useState('');
  const [workoutTime, setWorkoutTime] = useState('');
  const [userLevel, setUserLevel] = useState('');
  const [generatedPlan, setGeneratedPlan] = useState('');
  const [planLoading, setPlanLoading] = useState(false);

  const fitnessGoals = [
    { id: 'strength', label: 'Build Strength', icon: Dumbbell, color: 'bg-blue-500' },
    { id: 'cardio', label: 'Improve Cardio', icon: Zap, color: 'bg-red-500' },
    { id: 'weight_loss', label: 'Weight Loss', icon: TrendingUp, color: 'bg-emerald-500' },
    { id: 'muscle_gain', label: 'Muscle Gain', icon: Target, color: 'bg-purple-500' }
  ];

  const timeOptions = [
    { id: '60', label: '1 hour' },
    { id: '75', label: '1 hour 15 minutes' },
    { id: '90', label: '1 hour 30 minutes' },
    { id: '105', label: '1 hour 45 minutes' },
    { id: '120', label: '2 hours' }
  ];

  const experienceLevels = [
    { id: 'beginner', label: 'Beginner' },
    { id: 'intermediate', label: 'Intermediate' },
    { id: 'advanced', label: 'Advanced' }
  ];

  const createWorkoutPlan = async () => {
    if (!currentGoal || !workoutTime || !userLevel) {
      return;
    }

    setPlanLoading(true);
    setGeneratedPlan('');

    try {
      const planRequest = {
        goal: currentGoal,
        duration: workoutTime,
        level: userLevel,
        equipment: ['bodyweight', 'dumbbells', 'resistance bands'],
        preferences: user?.goals || []
      };

      const newPlan = await geminiService.generateWorkoutPlan(planRequest);
      setGeneratedPlan(newPlan);
    } catch (error) {
      console.error('Error generating workout:', error);
      alert('Failed to generate workout plan. Please try again.');
    } finally {
      setPlanLoading(false);
    }
  };

  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-slate-900 mb-4">Please log in to access workout planner</h2>
          <Link to="/login" className="text-emerald-600 hover:text-emerald-700">
            Go to Login
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-slate-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-slate-900 mb-2">ü§ñ AI Workout Planner</h1>
          <p className="text-slate-600">
            Get personalized workout plans generated by AI based on your goals and preferences.
          </p>
        </div>

        <div className="workout-builder-container space-y-8">
          {/* Workout Configuration */}
          <div className="plan-setup-section space-y-6">
            {/* Goal Selection */}
            <div className="goal-picker bg-white rounded-2xl p-6 shadow-sm border border-slate-200">
              <h3 className="section-title text-xl font-semibold text-slate-900 mb-4">üéØ Select Your Goal</h3>
              <div className="goals-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {fitnessGoals.map((goal) => (
                  <button
                    key={goal.id}
                    onClick={() => setCurrentGoal(goal.id)}
                    className={`goal-card p-4 rounded-xl border-2 transition-all duration-200 ${
                      currentGoal === goal.id
                        ? 'border-emerald-500 bg-emerald-50 transform scale-105'
                        : 'border-slate-200 hover:border-slate-300 hover:shadow-md'
                    }`}
                  >
                    <div className="goal-content flex flex-col items-center">
                      <div className={`goal-icon p-3 rounded-lg ${goal.color} mb-3`}>
                        <goal.icon className="h-6 w-6 text-white" />
                      </div>
                      <span className="goal-label font-medium text-slate-900">{goal.label}</span>
                    </div>
                  </button>
                ))}
              </div>
            </div>

            {/* Duration and Level Selection */}
            <div className="settings-row grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Duration Selection */}
              <div className="time-selector bg-white rounded-2xl p-6 shadow-sm border border-slate-200">
                <h3 className="section-title text-xl font-semibold text-slate-900 mb-4">‚è±Ô∏è Workout Duration</h3>
                <div className="time-options grid grid-cols-1 gap-3">
                  {timeOptions.map((duration) => (
                    <button
                      key={duration.id}
                      onClick={() => setWorkoutTime(duration.id)}
                      className={`time-option p-3 rounded-lg border-2 transition-all duration-200 flex items-center ${
                        workoutTime === duration.id
                          ? 'border-emerald-500 bg-emerald-50 text-emerald-700'
                          : 'border-slate-200 hover:border-slate-300'
                      }`}
                    >
                      <Clock className="h-5 w-5 mr-3" />
                      <span className="time-label text-sm font-medium">{duration.label}</span>
                    </button>
                  ))}
                </div>
              </div>

              {/* Level Selection */}
              <div className="level-selector bg-white rounded-2xl p-6 shadow-sm border border-slate-200">
                <h3 className="section-title text-xl font-semibold text-slate-900 mb-4">üí™ Fitness Level</h3>
                <div className="level-options grid grid-cols-1 gap-3">
                  {experienceLevels.map((level) => (
                    <button
                      key={level.id}
                      onClick={() => setUserLevel(level.id)}
                      className={`level-option p-4 rounded-lg border-2 transition-all duration-200 flex items-center ${
                        userLevel === level.id
                          ? 'border-emerald-500 bg-emerald-50 text-emerald-700'
                          : 'border-slate-200 hover:border-slate-300'
                      }`}
                    >
                      <User className="h-5 w-5 mr-3" />
                      <span className="level-label text-sm font-medium">{level.label}</span>
                    </button>
                  ))}
                </div>
              </div>
            </div>

            {/* Generate Button */}
            <div className="generate-section text-center">
              <button
                onClick={createWorkoutPlan}
                disabled={!currentGoal || !workoutTime || !userLevel || planLoading}
                className="generate-btn bg-gradient-to-r from-emerald-600 to-blue-600 text-white py-4 px-8 rounded-xl font-semibold hover:from-emerald-700 hover:to-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 transform hover:scale-105 flex items-center mx-auto"
              >
                <Play className="h-5 w-5 mr-2" />
                {planLoading ? 'ü§ñ Generating AI Workout Plan...' : '‚ú® Generate AI Workout Plan'}
              </button>
            </div>
          </div>

          {/* Workout Plan Display */}
          {(generatedPlan || planLoading) && (
            <div className="plan-display-area">
              <WorkoutPlanDisplay 
                plan={generatedPlan} 
                isLoading={planLoading}
                onStartWorkout={() => console.log('Starting workout...')}
              />
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default WorkoutPlanner;